peer.discovery = {

    # if peer discovery is on
    # the discovery protocol will be used to find other nodes and connect them
    # if peer discovery is off
    # this peer will only be connecting to the peers from [peer.active] list
    # inbound connections from other peers are accepted as well
    #
    # 만약 피어 검색이 켜져있으면
    # 검색 프로토콜이 다른 노드를 찾아 연결하는데 사용된다.
    # 만약 피어 검색이 꺼져있으면
    # 이 피어는 [peer.active] 목록의 피어에만 연결된다.
    # 다른 피어의 인바운드 연결은 허용된다.
    enabled = true

    # List of the seed peers to start
    # the search for online peers
    # values: [ip:port, enode://nodeid@ip:port, ip:port ...]
    #
    # 온라인 피어를 검색할 시드 피어 목록
    ip.list = [
        #"202.182.103.166:44069",
        #"202.182.103.146:44069"
        "enode://7c2a07d67d6f0682f63a131063e2aa939dd522a83814229ee38339afc75a3f444c095abf663e06e09f0451902fca77f28f6758d51b614b29a18fa5107ddfd2df@202.182.103.166:44069",
        "enode://74ac41a85118c2b8c7e64f02ab024f2df9b3f313228c35b35516ed6109043b93b993744b909aa30fdf95285c2cb6290eea47f77d17c249ceaaed875d802fe0db@202.182.103.146:44069",
        "enode://3a5a94675fb39a71661c7a6b05f429397c7d44f04810cbc3ed303f63cd9af2ed30604b17d589be3c579a01a57dd2df3261d9c77ede4380754358386956636f62@149.28.32.239:44069",
        "enode://53261e0cd6b6d8321c4b999e72d4a8478080192e466122c9266ce53f6a78ad65cbbc0c080886ee83b6a41edb0bf755b46544aff04295fc4b206681b69b5d6aea@199.247.12.72:44069",
        "enode://ef804cee13d091dbe495200c2b5b7d3b7aeb8275d53ef02791cb08dd9998fd4e1016e3b40e95e84a20a32576ef19c04f66e5738d62be54c6710e9c6a5df3d64e@108.61.189.107:44069",
        "enode://285d6eebadee52d4ef5f9229f127d705d74e9f75382610fe653da571e28392d114c5aa64fa4faae4f2242081ef4feb9fd27363cb87fbe90e2a387bfa5c7da439@45.76.160.80:43069",
        "enode://da2704464049898246a4d5655e2693648181481cf54643e7794404be91c832d51300f79ea00be355739cafa3d355c3a4e784da934ef1f309651a3d341d288459@45.77.229.232:43069",
        "enode://a124d744726dc5210251c2d4e84b9e06553fffc06e47a5235e7f8feaf7d038022655a09cca7eba0facf88bd6e83316755d293191869e3a98323e81c8556c90e9@207.148.99.177:43069",
        "enode://640853d2b285bd05a230c22bf124c5ace38345e342b06dffdeb8f37737619fd0bbdbb17e6eae17f9077af4b5dffc064022b95753bf01269975da9a3ba0de192c@207.148.115.239:43069",
        "enode://1b9bbdc4b32cd7dc4e12999b705d4dc91d8b6fb115ec2772b6580fee7821612261f84e8f2b6aa29fafff9472aaec0c3bbc47a50779a0f1c0c23d1a32b511cbc3@45.32.11.167:43069",
        "enode://61cecb767edef055d15089dc9f428e2ca1595015bf30effcb66e1924c42fda3c8b90777eee6a592aa4cf6ee34bf273bda325c12a19b92ce4909770bfb6972392@45.32.55.76:43069",
        "enode://6b02c35462d083ed2634472b398691c88c85d3a1a0fb6ff4e3c459bf4f6dc3d394f1d896b717161ac7db37f6b9026b26a47f174d31b4601b1ae5ba38a6441e9d@207.148.115.227:43069",
        "enode://4ac0218cb5b0fc35868440ec213ffe635fd32cc976eb07f2e4da9b4677d3cb0ffe064683f26bc5a7c193d93e62314f65a32198b87bc7d89a5f10e7cbdc2dceec@108.160.141.139:43069",
        "enode://824541766918a90bff708afcc4684853f510b38bbc86158d67e0438ca95fe48a140e99c44588324f8d374d1693b7817f67edde365d5dd0d365b14a54b7915659@45.77.24.224:43069",
        "enode://45f65f2893cbce1145c74e365c706c50313eac2cb0dab553c88ae4b5c44e7da1096a3130f669ceb4d39582152f7b251cfc69a73e43b5839fc80cc7139cf146be@104.207.131.196:43069",
        "enode://ef20324a4767d818ea8724d2788fcd1ece5f7c97d8425fedaa3a6364ccc4db771392d8b19f57484cde30a54ecebaa349d202222e4a14fa3bb3ccd7b67c687000@149.248.53.105:43069"
    ]

    # external IP/hostname which is reported as our host during discovery
    # if not set, the service http://checkip.amazonaws.com is used
    # the last resort is to get the peer.bind.ip address
    #
    # Discovery 동안 우리 호스트에 보고되는 외부 IP/Hostname
    # 만약 설정되지 않으면, http://checkip.amazonawa.com 이 이용된다.
    # 마지막 수단으로 peer.bind.ip 주소를 얻어온다.
    external.ip = null

    # Local network adapter IP to which
    # the discovery UDP socket is bound
    # e.g: 192.168.1.104
    #
    # if the value is empty it will be retrieved
    # by punching to some known address e.g: www.google.com
    #
    # 검색 UDP 소켓이 바인딩 된 로컬 네트워크 어댑터 IP
    # 예 : 192.168.1.104
    #
    # 값이 비어있으면 www.google.com과 같이 알려진 주소 펀칭을 통해 검색한다.
    bind.ip = ""

    # indicates whether the discovery will include own home node
    # within the list of neighbor nodes
    #
    # 발견할 때 이웃 노드 리스트 내에 자신의 홈 노드를 포함할지 여부를 지시한다.
    public.home.node = true

    # indicates if the discovered nodes and their reputations
    # are stored in DB and persisted between VM restarts
    #
    # 발견된 노드들과 그것들의 평가가 DB에 저장되어 VM이 재시작하는 동안에도 유지할 것인지 여부를 지시한다.
    persist = true

    # the period in seconds with which the discovery
    # tries to reconnect to successful nodes
    # 0 means the nodes are not reconnected
    #
    # 발견이 성공적인 노드에 다시 연결을 시도하는 시간(초)
    # 0은 노드가 다시 연결되지 않음을 의미
    touchPeriod = 600

    # the maximum number of nodes to reconnect to
    # -1 for unlimited
    #
    # 다시 연결하는 최대 노드 수
    # 무제한인 경우 -1
    touchMaxNodes = 100

    # number of workers that
    # test the peers for being
    # online [1..10]
    #
    # 피어가 온라인 상태인지 테스트하는 worker의 수
    workers = 8
}

peer {
    # Port on which APIS will listen
    # for incoming connections
    # APIS Mainnet : 43069
    # APIS Testnet : 44069
    #
    # APIS가 들어오는 연결을 수신 대기하는 포트 번호
    # 메인넷 : 43069
    # 테스트넷 : 44069
    listen.port = 43069

    # Network id
    # Testnet (1 < port) 10001 ~
    # Mainnet 1
    networkId = 10004

    # Private key of the peer
    # The key is generated by default on the first run and stored in the database folder
    # If you have your own peer ID, specify its private key here
    #
    # 피어의 개인키
    # 키는 실행 시 기본적으로 생성되어 데이터베이스 폴더에 저장된다.
    # 자신의 피어 ID를 갖고있다면, 여기에 개인키를 지정하시오.
    #
    # derived nodeId = dead745c1dbcde518b48e52aca1e8d5ba666005a2c8804e39826c6080fb11c1e8abe41d1e41896e871f204f790a90fa9781744cccecf492212192a7c56e7673b
    # privateKey = f67c4032a7ff79bbfa7a780331b235c4eb681d51a0704cb1562064fb6c4bced4

    # Boot node list
    active = [
        #{ url = "enode://74ac41a85118c2b8c7e64f02ab024f2df9b3f313228c35b35516ed6109043b93b993744b909aa30fdf95285c2cb6290eea47f77d17c249ceaaed875d802fe0db@202.182.103.146:43069" }
        #{ url = "enode://7c2a07d67d6f0682f63a131063e2aa939dd522a83814229ee38339afc75a3f444c095abf663e06e09f0451902fca77f28f6758d51b614b29a18fa5107ddfd2df@202.182.103.166:43069" }
        #{ url = "enode://3a5a94675fb39a71661c7a6b05f429397c7d44f04810cbc3ed303f63cd9af2ed30604b17d589be3c579a01a57dd2df3261d9c77ede4380754358386956636f62@149.28.32.239:43069" }
        #{ url = "enode://53261e0cd6b6d8321c4b999e72d4a8478080192e466122c9266ce53f6a78ad65cbbc0c080886ee83b6a41edb0bf755b46544aff04295fc4b206681b69b5d6aea@199.247.12.72:43069" }
        #{ url = "enode://ef804cee13d091dbe495200c2b5b7d3b7aeb8275d53ef02791cb08dd9998fd4e1016e3b40e95e84a20a32576ef19c04f66e5738d62be54c6710e9c6a5df3d64e@108.61.189.107:43069" }
        #{ url = "enode://a124d744726dc5210251c2d4e84b9e06553fffc06e47a5235e7f8feaf7d038022655a09cca7eba0facf88bd6e83316755d293191869e3a98323e81c8556c90e9@207.148.99.177:43069" }
        #{ url = "enode://640853d2b285bd05a230c22bf124c5ace38345e342b06dffdeb8f37737619fd0bbdbb17e6eae17f9077af4b5dffc064022b95753bf01269975da9a3ba0de192c@207.148.115.239:43069" }
        #{ url = "enode://1b9bbdc4b32cd7dc4e12999b705d4dc91d8b6fb115ec2772b6580fee7821612261f84e8f2b6aa29fafff9472aaec0c3bbc47a50779a0f1c0c23d1a32b511cbc3@45.32.11.167:43069" }
        #{ url = "enode://61cecb767edef055d15089dc9f428e2ca1595015bf30effcb66e1924c42fda3c8b90777eee6a592aa4cf6ee34bf273bda325c12a19b92ce4909770bfb6972392@45.32.55.76:43069" }
        #{ url = "enode://6b02c35462d083ed2634472b398691c88c85d3a1a0fb6ff4e3c459bf4f6dc3d394f1d896b717161ac7db37f6b9026b26a47f174d31b4601b1ae5ba38a6441e9d@207.148.115.227:43069" }
        #{ url = "enode://4ac0218cb5b0fc35868440ec213ffe635fd32cc976eb07f2e4da9b4677d3cb0ffe064683f26bc5a7c193d93e62314f65a32198b87bc7d89a5f10e7cbdc2dceec@108.160.141.139:43069" }
        #{ url = "enode://824541766918a90bff708afcc4684853f510b38bbc86158d67e0438ca95fe48a140e99c44588324f8d374d1693b7817f67edde365d5dd0d365b14a54b7915659@45.77.24.224:43069" }
        #{ url = "enode://45f65f2893cbce1145c74e365c706c50313eac2cb0dab553c88ae4b5c44e7da1096a3130f669ceb4d39582152f7b251cfc69a73e43b5839fc80cc7139cf146be@104.207.131.196:43069" }
        #{ url = "enode://ef20324a4767d818ea8724d2788fcd1ece5f7c97d8425fedaa3a6364ccc4db771392d8b19f57484cde30a54ecebaa349d202222e4a14fa3bb3ccd7b67c687000@149.248.53.105:43069" }
        #{ url = "enode://285d6eebadee52d4ef5f9229f127d705d74e9f75382610fe653da571e28392d114c5aa64fa4faae4f2242081ef4feb9fd27363cb87fbe90e2a387bfa5c7da439@45.76.160.80:43069" }
        #{ url = "enode://da2704464049898246a4d5655e2693648181481cf54643e7794404be91c832d51300f79ea00be355739cafa3d355c3a4e784da934ef1f309651a3d341d288459@45.77.229.232:43069" }

        # Sample entries:
        # { url = "enode://<hex nodeID>@hostname.com:30303" }
        # {
        #    ip = hostname.com
        #    port = 30303
        #    nodeId = e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c
        # }
    ]

    # list of trusted peers from which incoming connections are always accepted
    #
    # 수신 연결이 항상 허용되는 신뢰할 수있는 피어 목록
    trusted = [
        { ip = "202.182.103.146" }
        { ip = "202.182.103.166" }
        { ip = "149.28.32.239" }
        { ip = "199.247.12.72" }
        { ip = "108.61.189.107" }
        { ip = "207.148.99.177" }
        { ip = "207.148.115.239" }
        { ip = "45.32.11.167" }
        { ip = "45.32.55.76" }
        { ip = "207.148.115.227" }
        { ip = "108.160.141.139" }
        { ip = "45.77.24.224" }
        { ip = "104.207.131.196" }
        { ip = "149.248.53.105" }
        { ip = "45.76.160.80" }
        { ip = "45.77.229.232" }

        # Sample entries:
        # {nodeId = "e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c"},
        # {ip = "11.22.33.44"},
        # {ip = "11.22.33.*"},
        # {
        #   nodeId = "e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c"
        #   ip = "11.22.33.44"
        # }
    ]

    # max number of active peers our node will maintain
    # extra peers trying to connect us will be dropped with TOO_MANY_PEERS message
    # the incoming connection from the peer matching 'peer.trusted' entry is always accepted
    #
    # 이 노드에서 유지할 최대 활성 피어 수
    # 추가로 우리에게 연결하려는 피어들은 TOO_MANY_PEERS 메시지와 함께 탈락된다.
    # 'peer.trusted' 리스트 내의 피어들의 들어오는 연결은 항상 허용된다.
    maxActivePeers = 30

    # The protocols supported by peer
    # can be: [eth, shh, bzz]
    #
    # 피어가 지원하는 프로토콜
    # [eth, shh, bzz] 가능
    capabilities = [eth]

    # connection timeout for trying to
    # connect to a peer [seconds]
    #
    # 피어에 연결하는 연결 시간제한 (초)
    connection.timeout = 2

    # how much time [seconds]
    # we will wait for a message
    # to arrive before closing the channel
    #
    # 채널을 닫기 전에 메시지가 도착하기까지 기다리는 시간(초)
    channel.read.timeout = 90

    p2p {
        # the default version outbound connections are made with
        # inbound connections are made with the version declared by the remote peer (if supported)
        # version = 4

        # max frame size in bytes when framing is enabled
        framing.maxSize = 32768

        # forces peer to send Handshake message in format defined by EIP-8,
        #
        # 피어가 EIP-8 형식으로 핸드쉐이크 메시지를 보내도록 강제
        # see https://github.com/apis/EIPs/blob/master/EIPS/eip-8.md
        eip8 = true
    }
}

# the folder resources/genesis
# contains several versions of
# genesis configuration according
# to the network the peer will run on
#
# resources/genesis 폴더에는 피어가 실행할 네트워크에 따라 몇가지 버전의 genesis 구성이 담겨져있다.
genesis = apis-test.json

# path to genesis file
# has priority over `genesis` option
#
# genesis 파일 경로
# genesis 설정보다 높은 우선순위를 갖는다
# genesisFile = /some/path/to/frontier.json

# Blockchain settings (constants and algorithms) which are
# not described in the genesis file (like MINIMUM_DIFFICULTY or Mining algorithm)
# The possible named presets are:
#
# genesis 파일에 설명되지 않은(MINIMUM_DIFFICULTY 또는 채굴 알고리즘) 블록체인 설정 (상수와 알고리즘)
# 사전 설정된 이름으로 가능한 것들 :
# - main : the main network (Frontier-Homestead-...)
# - test: test network
# For custom network settings please refer to 'blockchain.config.class'
# 맞춤 네트워크 설정은 'blockchain.config.class'를 참조하시오.
blockchain.config.name = "test"

# This is a more advanced replacement for 'blockchain.config.name'
# Here the exact org.apis.config.BlockchainForkConfig implementation
# class name can be specified.
# Only one of two options (this and above) can be defined.
#
# 이 옵션은 'blockchain.config.name'에 대해 고급 설정으로 대체한다.
# 정확히 org.apis.config.BlockchainForkConfig 구현 클래스 이름을 지정할 수 있음
# 두 설정(이것과 위에) 중 하나만 정의할 수 있다.
#blockchain.config.class = "org.apis.config.fork.MainForkConfig"

database {
    # place to save physical storage files
    # can be either absolute or relative path
    #
    # 실제 저장소 파일을 저장할 위치는 절대경로 또는 상대경로일 수 있다.
    dir = apisData

    # every time the application starts
    # the existing database will be
    # destroyed and all the data will be
    # downloaded from peers again [true/false]
    #
    # 프로그램이 시작할때마다 기존 데이터베이스가 삭제되고 모든 데이터가 다시 다른 피어로부터 다운로드된다. [true / false]
    reset = false

    # If reset=true, every time the application
    # starts the database will reset itself to
    # this block number and sync again from there.
    # Set to 0 for a 'full' reset.
    #
    # reset=true 인 경우, 프로그램이 시작될 때마다 이 블록 번호로부터 데이터베이스가 재설정되고, 거기서부터 다시 동기화된다.
    # 0으로 설정하면 "전체" 재설정한다.
    resetBlock = 0

    # every time the application starts
    # existing database will be restored from latest backup
    # this option is supported by RocksDB only
    fromBackup = false


    # handling incompatible database version:
    #  * EXIT   - (default) show error in std out and exit by throwing Error
    #  * RESET  - clear database directory and continue working
    #  * IGNORE - continue working regardless possible issues
    #
    # 호환되지 않는 데이터베이스 버전 처리:
    #  * EXIT   - (기본값) std out에 에러 메시지를 표시하고 Error를 throw하여 종료
    #  * RESET  - 데이터베이스 디렉토리를 비우고 다시 시작
    #  * IGNORE - 가능한 문제와 상관없이 계속 진행
    # @since 1.4.0
    incompatibleDatabaseBehavior = RESET

    # controls state database pruning
    # pruned state consumes much less disk space (e.g. 50G full and 1G pruned)
    # but the state can be restored only within last [maxDepth] blocks, all older
    # states are lost
    #
    # 상태 데이터베이스 가지치기를 제어
    # 가지치기 상태는 디스크 공간을 훨씬 적게 소비합니다(예: 50G 전체, 1G 가지치기 상태)
    # 하지만 상태는 마지막 [maxDepth] 블록 내에서만 복원 할 수 있으며 이전 상태는 모두 손실됩니다.
    prune {
        enabled = true

        # controls how much last block states are not pruned
        # it is not recommneded to set this value below 192
        # as it can prevent rebranching from long fork chains
        #
        # NOTE: the bigger this value is the larger memory footprint pruning has,
        # here are some milstones to get the idea of how large it can be:
        #       192: 10 Mb
        #     1_000: 16 Mb
        #    10_000: 58 Mb
        #   100_000: 718 Mb
        # 1_000_000: 5658 Mb
        maxDepth = 192
    }

    # defines a number of opened files by db instance
    # this number has significant impact on read amplification
    # on the other hand it can force exceeding of user's limit,
    # OS usually set it to 1024 for all applications
    maxOpenFiles = 512
}

# Cache settings
cache {

    flush {
        # size in Mbytes of the write buffer for all datasources (state, blocks, transactions)
        # data is flushed to DB when write caches size exceeds this limit
        # value < 0 disables this option
        #
        # MByte 단위의 쓰기 캐쉬 크기로, 모든 데이터 소스(상태, 블록, 트랜젝션) 데이터가 쓰기 캐쉬 사이즈를 초과할 경우 DB로 플러시된다.
        # 값을 0보다 작게 설정하면 이 설정을 비활성화한다.
        writeCacheSize = 64

        # force data flush each N blocks
        # [10000 flush each 10000 blocks]
        # value 0 disables this option
        #
        # N 블록마다 강제로 데이터를 플러시한다.
        # [10000개의 블록마다 10000번 플러시]
        # 0을 설정하면 이 옵션을 비활성화한다.
        blocks = 0

        # flush each block after full (long) sync complete
        #
        # 전체 동기화(long)가 완료된 이후에는 각 블록들을 플러시한다.
        shortSyncFlush = true
    }

    # total size in Mbytes of the state DB read cache
    stateCacheSize = 384

    # the size of block queue cache to be imported in MBytes
    blockQueueSize = 32

    # the size of header queue cache during import in MBytes
    headerQueueSize = 8

    # maximum size (in Mb) the state bloom fiter can grow up to
    # when reaching this threshold the bloom filter
    # is turned off forever
    # 128M can manage approx up to 50M of db entries
    maxStateBloomSize = 128
}

# eth sync process
sync {

    # block chain synchronization
    # can be: [true/false]
    enabled = true

    # Fast sync options
    fast {

        # enables/disables fastsync
        # when enabling make sure the global sync option is enabled ('sync.enabled')
        enabled = false

        # when specified the fastsync retrieves the state for this block
        # this is the fast and secure option to do fastsync
        # if not specified the block is selected like [peerBestBlockNumber - 1000]
        //        pivotBlockHash = 6149ddfd7f52b2aa34a65b15ae117c269b5ff2dc58aa839dd015790553269411

        # create a backup when the state has been downloaded
        # this option is supported by RocksDB only
        backupState = false

        # skip bodies and receipts downloading for blocks prior to pivot
        # this option doesn't affect block headers
        skipHistory = false
    }

    # minimal peers count
    # used in sync process
    # sync may use more peers
    # than this value
    # but will try to get
    # at least this many from discovery
    peer.count = 30

    # Uncomment this param
    # to use a strict Eth version.
    # Useful for testing
    # version = 62

    # exit if we receive a block that causes state conflict
    # this option is mainly for debugging purposes
    exitOnBlockConflict = false

    # Make long sync done (switch to short sync) in XX seconds
    # if all known blocks already downloaded.
    # Useful in private networks where auto-switch could fail.
    # Recommended value for private networks: 60 (seconds)
    makeDoneByTimeout = -1
}

# miner options
mine {

    # start mining blocks
    # when 'sync.enabled' is true the mining starts when the sync is complete
    # else the mining will start immediately, taking the best block from database
    # (or genesis if no blocks exist yet)
    #
    # 블록 마이닝을 시작한다.
    # sync.enabled 값이 true일 경우 동기화가 완료되면 마이닝을 시작한다.
    # false 일 경우, 데이터베이스의 베스트 블록(아직 블록이 없을 경우, 제네시스 블록)을 가져와서 채굴을 바로 시작한다.
    start = true

    # number of CPU threads the miner will mine on
    # 0 disables CPU mining
    cpuMineThreads = 4

    # there two options for CPU mining 'light' and 'full'
    # 'light' requires only 16M of RAM but is much slower
    # 'full' requires 1G of RAM and possibly ~7min for the DataSet generation
    #   but is much faster during mining
    #
    # CPU 마이닝에는 'light'와 'full' 두 가지의 옵션이 있다.
    fullDataSet = true

    # extra data included in the mined block
    # one of two properties should be specified
    extraData = "APIS powered Server"
    #extraDataHex = "FEEDAAAAA999"

    # transactions with the gas price lower than this will not be
    # included in mined blocks
    # decimal number in weis
    minGasPrice = 50000000000  # 50 gigaAPIS

    # minimal timeout between mined blocks
    minBlockTimeoutMsec = 0

    # start mining with specific nonce (might be useful for testing)
    # null for random start nonce
    startNonce = null
}

masternode {
    # 마스터노드를 등록하거나 갱신할 때 전송되는 트랜잭션의 가스 가격
    # 더 낮은 값으로도 설정할 수 있으나,
    # 너무 낮을 경우, 블록에 탑재되지 못해 마스터노드 상태가 해제될 수 있으므로 주의할 것.
    gasPrice = 100000000000
}

# Solidity options
solc {
    # Full path to solc executable
    # If path is not provided, bundled Solidity Compiler is used
    path = null
}

# ========================================================
#    Debug and advanced options
# ========================================================

# the time we wait to the network
# to approve the transaction, the
# transaction got approved when
# include into a transactions msg
# retrieved from the peer [seconds]
#
# 거래를 승인하기 위해 네트워크에 대기하는 시간[초]
# 피어에서 검색 한 트랜잭션 msg에 포함될 때 트랜잭션이 승인된다
transaction.approve.timeout = 15

# the number of blocks that should pass
# before a pending transaction is removed
#
# 보류중인 트랜잭션이 제거되기 전에 통과해야하는 블록 수
transaction.outdated.threshold = 75

dump {
  # for testing purposes
  # all the state will be dumped
  # in JSON form to [dump.dir]
  # if [dump.full] = true
  # possible values [true/false]
  full = false
  dir = dmp

  # This defines the vmtrace dump
  # to the console and the style
  # -1 for no block trace
  # styles: [pretty/standard+] (default: standard+)
  block = -1
  style = pretty

  # clean the dump dir each start
  clean.on.restart = true
}

# structured trace
# is the trace being
# collected in the
# form of objects and
# exposed to the user
# in json or any other
# convenient form.
vm.structured {
  trace = false
  dir = vmtrace
  compressed = true
  initStorageLimit = 10000
}

keystore {
    dir = keystore
}

abi {
    dir = abi
}

config {
    dir = config
}

# make changes to tracing options
# starting from certain block
# -1 don't make any tracing changes
trace.startblock = -1

# enables/disables internal transactions data record
# a single transaction can potentially collect large amount
# of call data (especially in tests) so there is an option to disable it
record.internal.transactions.data = true

# invoke vm program on
# message received,
# if the vm is not invoked
# the balance transfer
# occurs anyway  [true/false]
play.vm = true

# hello phrase will be included in
# the hello message of the peer
hello.phrase = Dev

# this property used
# mostly for debug purposes
# so if you don't know exactly how
# to apply it, leave it as [-1]
#
# ADVANCED: if we want to load a root hash
# for db not from the saved block chain (last block)
# but any manual hash this property will help.
# values [-1] - load from db
#        [hex hash 32 bytes] root hash
root.hash.start = null

# Key value data source values: [leveldb/inmem]
keyvalue.datasource = leveldb

// 테스트용
record.blocks=false
blockchain.only=false

# Load the blocks
# from a rlp lines
# file and not for
# the net
blocks.loader=""

#crypto settings, such as sign, hash, etc
crypto {
	#JCA cryptoprovider name. 
	providerName="SC"
	#Used for create JCA MessageDigest
	hash.alg256="ETH-KECCAK-256"
	hash.alg512="ETH-KECCAK-512"
}
